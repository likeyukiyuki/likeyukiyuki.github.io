<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuki</title>
  
  
  <link href="http://likeyukiyuki.github.io/atom.xml" rel="self"/>
  
  <link href="http://likeyukiyuki.github.io/"/>
  <updated>2023-09-25T18:35:21.825Z</updated>
  <id>http://likeyukiyuki.github.io/</id>
  
  <author>
    <name>yuki</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023-09-26周报</title>
    <link href="http://likeyukiyuki.github.io/2023/09/26/2023-09-26%E5%91%A8%E6%8A%A5/"/>
    <id>http://likeyukiyuki.github.io/2023/09/26/2023-09-26%E5%91%A8%E6%8A%A5/</id>
    <published>2023-09-25T17:02:42.000Z</published>
    <updated>2023-09-25T18:35:21.825Z</updated>
    
    <content type="html"><![CDATA[<h1>linear SVM</h1><p>对SVM学习后，运行了线性内核（linear kernels）的向量机demo。</p><p>导入相关需要的包：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn.svm</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sio</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h3 id="导入数据-load-data"><a class="header-anchor" href="#导入数据-load-data">¶</a>导入数据 load data</h3><p>读取文件，导入数据。利用scipy.io中的loadmat函数读入mat文件，用keys()可以获得字典中所有的键,get()函数返回指定键的值,DataFrame()创建dataframe，参数columns为列名：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mat = sio.loadmat(<span class="string">&#x27;./data/ex6data1.mat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(mat.keys())</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(mat.get(<span class="string">&#x27;X&#x27;</span>), columns=[<span class="string">&#x27;X1&#x27;</span>, <span class="string">&#x27;X2&#x27;</span>])</span><br><span class="line">data[<span class="string">&#x27;y&#x27;</span>] = mat.get(<span class="string">&#x27;y&#x27;</span>)<span class="comment">#添加一列y</span></span><br><span class="line">data.head()<span class="comment">#打印出来前五行看看效果</span></span><br></pre></td></tr></table></figure><p><img src="/2023/09/26/2023-09-26%E5%91%A8%E6%8A%A5/dataframe1.png" alt></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">min</span>(data[<span class="string">&#x27;X1&#x27;</span>]), <span class="built_in">max</span>(data[<span class="string">&#x27;X1&#x27;</span>]), <span class="built_in">min</span>(data[<span class="string">&#x27;X2&#x27;</span>]), <span class="built_in">max</span>(data[<span class="string">&#x27;X2&#x27;</span>]) <span class="comment">#获取data中x1的最大值和最小值，x2的最大值和最小值</span></span><br></pre></td></tr></table></figure><h2 id="可视化数据-visualize-data"><a class="header-anchor" href="#可视化数据-visualize-data">¶</a>可视化数据 visualize data</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">positive = data[data.y == <span class="number">1</span>]<span class="comment">#获取一个y列都为1的dataframe</span></span><br><span class="line">negative = data[data.y == <span class="number">0</span>]<span class="comment">#获取一个y列都为0的dataframe</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">6</span>)) <span class="comment">#画图，siez为（width=8，height=6）</span></span><br><span class="line">ax.scatter(positive[<span class="string">&#x27;X1&#x27;</span>], positive[<span class="string">&#x27;X2&#x27;</span>], label=<span class="string">&#x27;positive&#x27;</span>, s=<span class="number">50</span>, marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>)<span class="comment">#画子图，横纵坐标为positive的x1、x2，标签为positive，散点图中点大小为50，标记为&#x27;+&#x27;,颜色为红色。</span></span><br><span class="line">ax.scatter(negative[<span class="string">&#x27;X1&#x27;</span>], negative[<span class="string">&#x27;X2&#x27;</span>], label=<span class="string">&#x27;negative&#x27;</span>, s=<span class="number">50</span>, marker=<span class="string">&#x27;o&#x27;</span>, c=<span class="string">&#x27;b&#x27;</span>)<span class="comment">#同上</span></span><br><span class="line">ax.legend(loc=<span class="string">&#x27;best&#x27;</span>)<span class="comment">#图例位置为右上角</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X1&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;X2&#x27;</span>)<span class="comment">#横纵坐标标签为x1,x2</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="try-c-1"><a class="header-anchor" href="#try-c-1">¶</a>try c=1</h2><p>选择模型sklearn库内的linearSVC模型，参数C为惩罚参数，loss表示损失函数，max_iter指定最大的迭代次数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svc1 = sklearn.svm.LinearSVC(C=<span class="number">1</span>, loss=<span class="string">&#x27;hinge&#x27;</span>, max_iter=<span class="number">20000</span>)</span><br><span class="line">svc1.fit(data[[<span class="string">&#x27;X1&#x27;</span>, <span class="string">&#x27;X2&#x27;</span>]], data[<span class="string">&#x27;y&#x27;</span>])<span class="comment">#对数据进行训练</span></span><br><span class="line">svc1.score(data[[<span class="string">&#x27;X1&#x27;</span>, <span class="string">&#x27;X2&#x27;</span>]], data[<span class="string">&#x27;y&#x27;</span>])<span class="comment">#利用score()函数进行评估</span></span><br></pre></td></tr></table></figure><h3 id="决策边界-decision-boundary"><a class="header-anchor" href="#决策边界-decision-boundary">¶</a>决策边界 decision boundary</h3><p>numpy库内的arange()函数用于生成数组，参数：(起始位置，终止位置，步长)。meshgrid(x,y) :基于向量x和y中包含的坐标返回二维网格坐标。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">positive = data[data.y == <span class="number">1</span>]</span><br><span class="line">negative = data[data.y == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">ax.scatter(positive[<span class="string">&#x27;X1&#x27;</span>], positive[<span class="string">&#x27;X2&#x27;</span>], label=<span class="string">&#x27;positive&#x27;</span>, s=<span class="number">50</span>, marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax.scatter(negative[<span class="string">&#x27;X1&#x27;</span>], negative[<span class="string">&#x27;X2&#x27;</span>], label=<span class="string">&#x27;negative&#x27;</span>, s=<span class="number">50</span>, marker=<span class="string">&#x27;o&#x27;</span>, c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ax.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X1&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;X2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策边界, 使用等高线表示</span></span><br><span class="line">x1 = np.arange(<span class="number">0</span>, <span class="number">4.5</span>, <span class="number">0.01</span>)</span><br><span class="line">x2 = np.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0.01</span>)</span><br><span class="line">x1, x2 = np.meshgrid(x1, x2)</span><br><span class="line">y_pred = np.array([svc1.predict(np.vstack((a, b)).T) <span class="keyword">for</span> (a, b) <span class="keyword">in</span> <span class="built_in">zip</span>(x1, x2)]) <span class="comment">#将x1、x2的值打包合并返回一个数组</span></span><br><span class="line">plt.contour(x1, x2, y_pred, colors=<span class="string">&#x27;g&#x27;</span>, linewidths=<span class="number">.5</span>)<span class="comment">#绘等高线</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2023/09/26/2023-09-26%E5%91%A8%E6%8A%A5/output1.png" alt></p><h3 id="直观显示样本到超平面的符号距离的不同。"><a class="header-anchor" href="#直观显示样本到超平面的符号距离的不同。">¶</a>直观显示样本到超平面的符号距离的不同。</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">&#x27;SVM1 Confidence&#x27;</span>] = svc1.decision_function(data[[<span class="string">&#x27;X1&#x27;</span>, <span class="string">&#x27;X2&#x27;</span>]])</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">ax.scatter(data[<span class="string">&#x27;X1&#x27;</span>], data[<span class="string">&#x27;X2&#x27;</span>], s=<span class="number">50</span>, c=data[<span class="string">&#x27;SVM1 Confidence&#x27;</span>], cmap=<span class="string">&#x27;seismic&#x27;</span>)<span class="comment">#颜色随着距离的变化而不同</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;SVM(C=1) Decision Confidence&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X1&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;X2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策边界, 使用等高线表示</span></span><br><span class="line">x1 = np.arange(<span class="number">0</span>, <span class="number">4.5</span>, <span class="number">0.01</span>)</span><br><span class="line">x2 = np.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0.01</span>)</span><br><span class="line">x1, x2 = np.meshgrid(x1, x2)</span><br><span class="line">y_pred = np.array([svc1.predict(np.vstack((a, b)).T) <span class="keyword">for</span> (a, b) <span class="keyword">in</span> <span class="built_in">zip</span>(x1, x2)])</span><br><span class="line">plt.contour(x1, x2, y_pred, colors=<span class="string">&#x27;g&#x27;</span>, linewidths=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2023/09/26/2023-09-26%E5%91%A8%E6%8A%A5/output2.png" alt></p><h2 id="try-C-400"><a class="header-anchor" href="#try-C-400">¶</a>try C=400</h2><p>C越大越容易过拟合，图像中最左侧的点被划分到右侧。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svc400 = sklearn.svm.LinearSVC(C=<span class="number">400</span>, loss=<span class="string">&#x27;hinge&#x27;</span>, max_iter=<span class="number">80000</span>)</span><br><span class="line">svc400.fit(data[[<span class="string">&#x27;X1&#x27;</span>, <span class="string">&#x27;X2&#x27;</span>]], data[<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">svc400.score(data[[<span class="string">&#x27;X1&#x27;</span>, <span class="string">&#x27;X2&#x27;</span>]], data[<span class="string">&#x27;y&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="C-400-决策边界-decision-boundary"><a class="header-anchor" href="#C-400-决策边界-decision-boundary">¶</a>C=400 决策边界 decision boundary</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">positive = data[data.y == <span class="number">1</span>]</span><br><span class="line">negative = data[data.y == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">ax.scatter(positive[<span class="string">&#x27;X1&#x27;</span>], positive[<span class="string">&#x27;X2&#x27;</span>], label=<span class="string">&#x27;positive&#x27;</span>, s=<span class="number">50</span>, marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax.scatter(negative[<span class="string">&#x27;X1&#x27;</span>], negative[<span class="string">&#x27;X2&#x27;</span>], label=<span class="string">&#x27;negative&#x27;</span>, s=<span class="number">50</span>, marker=<span class="string">&#x27;o&#x27;</span>, c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ax.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X1&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;X2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策边界, 使用等高线表示</span></span><br><span class="line">x1 = np.arange(<span class="number">0</span>, <span class="number">4.5</span>, <span class="number">0.01</span>)</span><br><span class="line">x2 = np.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0.01</span>)</span><br><span class="line">x1, x2 = np.meshgrid(x1, x2)</span><br><span class="line">y_pred = np.array([svc400.predict(np.vstack((a, b)).T) <span class="keyword">for</span> (a, b) <span class="keyword">in</span> <span class="built_in">zip</span>(x1, x2)])</span><br><span class="line">plt.contour(x1, x2, y_pred, colors=<span class="string">&#x27;g&#x27;</span>, linewidths=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2023/09/26/2023-09-26%E5%91%A8%E6%8A%A5/output3.png" alt></p><h3 id="C-400-直观显示样本到超平面的符号距离的不同。"><a class="header-anchor" href="#C-400-直观显示样本到超平面的符号距离的不同。">¶</a>C=400 直观显示样本到超平面的符号距离的不同。</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">&#x27;SVM400 Confidence&#x27;</span>] = svc400.decision_function(data[[<span class="string">&#x27;X1&#x27;</span>, <span class="string">&#x27;X2&#x27;</span>]])</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">ax.scatter(data[<span class="string">&#x27;X1&#x27;</span>], data[<span class="string">&#x27;X2&#x27;</span>], s=<span class="number">50</span>, c=data[<span class="string">&#x27;SVM400 Confidence&#x27;</span>], cmap=<span class="string">&#x27;seismic&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;SVM(C=400) Decision Confidence&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X1&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;X2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策边界, 使用等高线表示</span></span><br><span class="line">x1 = np.arange(<span class="number">0</span>, <span class="number">4.5</span>, <span class="number">0.01</span>)</span><br><span class="line">x2 = np.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0.01</span>)</span><br><span class="line">x1, x2 = np.meshgrid(x1, x2)</span><br><span class="line">y_pred = np.array([svc400.predict(np.vstack((a, b)).T) <span class="keyword">for</span> (a, b) <span class="keyword">in</span> <span class="built_in">zip</span>(x1, x2)])</span><br><span class="line">plt.contour(x1, x2, y_pred, colors=<span class="string">&#x27;g&#x27;</span>, linewidths=<span class="number">.5</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/09/26/2023-09-26%E5%91%A8%E6%8A%A5/output4.png" alt><br>打印最终的dataframe查看数据，进行对比。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><p><img src="/2023/09/26/2023-09-26%E5%91%A8%E6%8A%A5/dataframe2.png" alt><br>关于线性内核的SVM向量机demo运行学习就到此为止啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;linear SVM&lt;/h1&gt;
&lt;p&gt;对SVM学习后，运行了线性内核（linear kernels）的向量机demo。&lt;/p&gt;
&lt;p&gt;导入相关需要的包：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2023-09-24 周报</title>
    <link href="http://likeyukiyuki.github.io/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/"/>
    <id>http://likeyukiyuki.github.io/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/</id>
    <published>2023-09-24T08:23:29.000Z</published>
    <updated>2023-09-24T17:51:14.807Z</updated>
    
    <content type="html"><![CDATA[<p>本周由于前四天时间都花费在往返学校以及考试中，所以学习的内容比较少，这周是关于线性回归的梯度下降算法的学习。</p><h1 id="理论部分-线性回归-Linear-Regression"><a href="#理论部分-线性回归-Linear-Regression" class="headerlink" title="理论部分 线性回归(Linear Regression)"></a>理论部分 线性回归(Linear Regression)</h1><p>线性回归是一个监督学习的算法，基于上周学习的基础可以知道回归问题是需要得到一个具体的预测值的，而线性回归顾名思义，其函数图像是一个线性图像。训练集中有着大量数据以及其映射关系，而机器学习的目的就是得到这种映射关系。这么说起来感觉很抽象，就像一个普通的二元一次方程，当我们知道一个x和方程式那必然可以得到一个y，机器学习就是已知有许多个x与y，需要找到方程式（也就是映射关系）。用专业点的话来说就是建立了一个模型。</p><h2 id="代价函数-Cost-Funcation"><a href="#代价函数-Cost-Funcation" class="headerlink" title="代价函数(Cost Funcation)"></a>代价函数(Cost Funcation)</h2><p>如何评价一个模型的好坏呢？这就需要引出接下来的代价函数了。当我们已经找到一个方程式，这时候我们可以对已经找到的方程输入一个x值而得到的一个y值（预测值），而同时我们又知道原本的y值（真实值），而真实值与预测值之间的差值（残差）就可以评估这个模型的好坏。但是问题是仅仅一个参数肯定没有代表性，那么我们需要对所有的进行计算然后求平方（为了消除负值）最后相加，我们就得到了预测值与真实值的方差（即代价函数cost function）用以评估模型。而我们此时的目的就转化成了找到cost function的最小值。<br>公式如图所示：<br><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/cost%20function.png"><br>当模型仅有一个参数时，函数的图像如图所示：<br><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/%E4%B8%80%E7%BB%B4%E7%BA%BF%E6%80%A7.png"><br>当模型有两个参数时。函数图像如下：<br><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/%E4%BA%8C%E7%BB%B4%E7%BA%BF%E6%80%A7.png"></p><h2 id="梯度下降法（Gradient-Descent）"><a href="#梯度下降法（Gradient-Descent）" class="headerlink" title="梯度下降法（Gradient Descent）"></a>梯度下降法（Gradient Descent）</h2><p>上面说到我们现在的目的是找到cost function的最小值，那么有什么方法可以准确快速的找到一个函数的最小值呢？没错，就是梯度下降法。它的工作原理是从初始点开始，不断寻找一个最优方向进行下降，直至收敛至局部最低点。而方向即是导数的方向。<br>如图所示：<br><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D.png"><br>如果初始位置不同找到的最低点也有可能不同。<br><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D2.png"><br>而如果当初始点就是在局部最低点的时候，将不会继续下降了。<br>梯度下降法的公式如图所示：<br><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E5%85%AC%E5%BC%8F.png"><br>“:&#x3D;”此符号的意思是赋值，意味着梯度下降是一个不断迭代的过程。<br>其中的”α”是决定下降的速率：α过小时，学习速率很低；α过大时，容易找不到局部最低点。</p><h2 id="线性回归的梯度下降法"><a href="#线性回归的梯度下降法" class="headerlink" title="线性回归的梯度下降法"></a>线性回归的梯度下降法</h2><p>最巧妙的地方就是在这里，前面说到了梯度下降法有一个问题在于它只能找到局部最优解而不是全局最优解，但是线性回归中代价函数的图像是一个凸函数，即只有一个最优解。那么在线性回归中运用梯度下降法简直是天作之合。<br>那么关于线性回归的梯度下降算法的理论部分就到这里为止啦~</p><h1 id="实验-线性回归算法相关demo的运行"><a href="#实验-线性回归算法相关demo的运行" class="headerlink" title="实验 线性回归算法相关demo的运行"></a>实验 线性回归算法相关demo的运行</h1><p>首先就是导入相关包，一般demo的开头代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>如果没有安装相关包在终端使用<code>pip install [包名]</code>即可，例如我需要安装numpy，则使用<code>pip install numpy</code>。以此类推，将我们需要的包安装好。</p><p>接下来就是读取数据，我们可以直接调用pandas库内的read_csv()函数来读取，其中参数path为文件路径，header与names都可以充当列名，当names没被赋值时，header会变成0，即选取数据文件的第一行作为列名；当 names 被赋值，header 没被赋值时，那么header会变成None。如果都赋值，就会实现两个参数的组合功能。head()方法默认输出数据的前5项，这里用来查看文件是否导入成功：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;ex1data1.txt&#x27;</span> <span class="comment">#路径</span></span><br><span class="line">data = pd.read_csv(path, header=<span class="literal">None</span>, names=[<span class="string">&#x27;Population&#x27;</span>, <span class="string">&#x27;Profit&#x27;</span>]) <span class="comment">#读取数据的方法</span></span><br><span class="line">data.head() </span><br></pre></td></tr></table></figure><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/demo-head1.png" width="200"><p>然后是画图，plot()显而易见的是一种绘图函数，参数<code>kind=&#39;scatter&#39;</code>图像类型为散点图，<code>x=&#39;Population&#39;, y=&#39;Profit&#39;</code>定义x轴为’Population’、y轴为’Profit’，<code>figsize=(12,8)</code>图片尺寸大小(width&#x3D;12,height&#x3D;8)，代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.plot(kind=<span class="string">&#x27;scatter&#x27;</span>, x=<span class="string">&#x27;Population&#x27;</span>, y=<span class="string">&#x27;Profit&#x27;</span>, figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/figure1.png"><br>再往dataframe添加一列数据，使用函数insert()，其中参数’0’代表添加至第一列，’Ones’代表列名为’Ones’，’1’代表插入数字’1’，代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/demo-head2.png" width="200"><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cols = data.shape[<span class="number">1</span>] <span class="comment">#获取列数</span></span><br><span class="line">X = data.iloc[:, <span class="number">0</span>:cols-<span class="number">1</span>] <span class="comment">#得到dataframe中所有行，1列到cols-1列的数据，即第一列至第二列的数据</span></span><br><span class="line">Y = data.iloc[:, cols-<span class="number">1</span>:cols]<span class="comment">#得到dataframe中所有行，cols-1列到cols列的数据，即第二列至第三列的数据</span></span><br><span class="line">X = np.matrix(X.values) </span><br><span class="line">Y = np.matrix(Y.values)<span class="comment">#转化为矩阵</span></span><br><span class="line">theta = np.matrix(np.array([<span class="number">0</span>, <span class="number">0</span>])) <span class="comment">#theta为[0,0]的矩阵</span></span><br></pre></td></tr></table></figure><p>导入包，选择LinearRegression模型，使用fit()函数利用选好的模型训练数据，参数中X代表输入，Y代表输出。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line">model = linear_model.LinearRegression()</span><br><span class="line">model.fit(np.array(X), np.array(Y))</span><br></pre></td></tr></table></figure><p>开始绘制图像：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = np.array(X[:, <span class="number">1</span>].A1) <span class="comment">#得到所有x的值的数组</span></span><br><span class="line">y = model.predict(np.array(X)).flatten() <span class="comment">#得到预测值y，并且降维成一维数组</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>)) <span class="comment">#画图、定义子图大小</span></span><br><span class="line">ax.plot(x, y, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;Prediction&#x27;</span>)<span class="comment">#在活跃区域绘图，坐标xy，颜色&#x27;r&#x27;即红色，标签label为&#x27;Prediction&#x27;</span></span><br><span class="line">ax.scatter(data.Population, data.Profit, label=<span class="string">&#x27;Traning Data&#x27;</span>)<span class="comment">#x轴数据为data.Population，y轴数据为data.Profit，标签label为&#x27;Traning Data&#x27;</span></span><br><span class="line">ax.legend(loc=<span class="number">2</span>)<span class="comment">#图例位置为左上角</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Population&#x27;</span>)<span class="comment">#x轴标签为&#x27;Population&#x27;</span></span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Profit&#x27;</span>)<span class="comment">#y轴标签为&#x27;Profit&#x27;</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;Predicted Profit vs. Population Size&#x27;</span>) <span class="comment">#图片title</span></span><br><span class="line">plt.show()<span class="comment">#展示图片</span></span><br></pre></td></tr></table></figure><p><img src="/2023/09/24/2023-09-24%E5%91%A8%E6%8A%A5/output.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本周由于前四天时间都花费在往返学校以及考试中，所以学习的内容比较少，这周是关于线性回归的梯度下降算法的学习。&lt;/p&gt;
&lt;h1 id=&quot;理论部分-线性回归-Linear-Regression&quot;&gt;&lt;a href=&quot;#理论部分-线性回归-Linear-Regression&quot; cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2023-09-13周报/週報</title>
    <link href="http://likeyukiyuki.github.io/2023/09/13/2023-09-13%E5%91%A8%E6%8A%A5/"/>
    <id>http://likeyukiyuki.github.io/2023/09/13/2023-09-13%E5%91%A8%E6%8A%A5/</id>
    <published>2023-09-12T17:20:35.000Z</published>
    <updated>2023-09-21T14:45:33.187Z</updated>
    
    <content type="html"><![CDATA[<p>本周将学习基础的机器学习。</p><p>&#x2F; 今週は機械学習の基本を学びます。</p><h2 id="首先是机器学习-1つ目は機械学習です"><a href="#首先是机器学习-1つ目は機械学習です" class="headerlink" title="首先是机器学习 &#x2F; 1つ目は機械学習です"></a>首先是机器学习 &#x2F; 1つ目は機械学習です</h2><p>其实在上学期我已经进行了机器学习的一个简单学习，但是掌握的不是很好，知道一些名词概念但是整体框架完全不了解。机器学习的过程是什么样的？机器学习中的某个名词起到的是什么作用？统统不了解。在这周的学习中成功的把之前所学的概念连接起来了。</p><p>&#x2F; 実際、私は前学期に機械学習の簡単な学習を行いましたが、あまりうまく習得していません。私はいくつかの名詞の概念を知っていますが、全体的な枠組みをまったく理解していません。機械学習のプロセスはどのように見えますか? 機械学習における用語はどのような役割を果たしますか? 私はそれをすべて理解しているわけではありません。 今週の学習では、以前に学んだ概念をうまく結び付けることができました。</p><h3 id="机器学习的过程-機械学習のプロセス"><a href="#机器学习的过程-機械学習のプロセス" class="headerlink" title="机器学习的过程 &#x2F; 機械学習のプロセス"></a>机器学习的过程 &#x2F; 機械学習のプロセス</h3><p>通过训练集，不断识别特征，不断建模，最后形成有效的模型，这个过程就叫做“机器学习”。</p><p>&#x2F; トレーニングセットを通じて、常に特徴を特定し、モデリングを続け、最終的に効果的なモデルを形成するこのプロセスは、「機械学習」と呼ばれます。</p><h4 id="监督学习与无监督学习-教師あり学習と教師なし学習"><a href="#监督学习与无监督学习-教師あり学習と教師なし学習" class="headerlink" title="监督学习与无监督学习 &#x2F; 教師あり学習と教師なし学習"></a>监督学习与无监督学习 &#x2F; 教師あり学習と教師なし学習</h4><p>机器学习又分为监督学习和无监督学习，监督学习是需要我们自己输入标签的，而无监督学习则不需要。由于目前只学习了监督学习，所以接下来描述的内容基本上都是监督学习相关的。</p><p>&#x2F; 機械学習は教師あり学習と教師なし学習に分けられ、教師あり学習では自分でラベルを入力する必要がありますが、教師なし学習はそうではありません。 これまでは教師あり学習しか学習していなかったため、次に説明する内容は基本的に教師あり学習です。</p><p>没有免费午餐定理 &#x2F; フリーランチ定理はありません<br>在机器学习中，有个定理被称为「没有免费的午餐」。简而言之，就是说没有一个算法可以完美解决所有问题，而且这对于监督学习（即对预测的建模）而言尤其如此。</p><p>&#x2F; 機械学習には「フリーランチがない」という定理があります。 要するに、単一のアルゴリズムがすべての問題を完全に解決できるわけではなく、これは教師あり学習、つまりモデリング予測に特に当てはまります。</p><h4 id="机器学习中的三大方向：分类、回归和聚类。-機械学習には、分類、回帰、クラスタリングという-3-つの主要な方向性があります。"><a href="#机器学习中的三大方向：分类、回归和聚类。-機械学習には、分類、回帰、クラスタリングという-3-つの主要な方向性があります。" class="headerlink" title="机器学习中的三大方向：分类、回归和聚类。 &#x2F; 機械学習には、分類、回帰、クラスタリングという 3 つの主要な方向性があります。"></a>机器学习中的三大方向：分类、回归和聚类。 &#x2F; 機械学習には、分類、回帰、クラスタリングという 3 つの主要な方向性があります。</h4><p>回归方法：是一种对数值型连续随机变量进行预测和建模的监督学习算法。简单来说就是预测的结果是数值。</p><p>&#x2F; 回帰法:数値連続確率変数を予測してモデル化する教師あり学習アルゴリズムです。 簡単に言えば、予測結果は数値です</p><p>常用算法：<br>线性回归（正则化）、回归树（集成方法）、深度学习、最近邻算法等等</p><p>&#x2F; 一般的に使用されるアルゴリズム:<br>線形回帰 (正則化)、回帰木 (アンサンブル法)、ディープ ラーニング、最近傍アルゴリズムなど</p><p>分类方法：是一种对离散型随机变量建模或预测的监督学习算法。简单来说就是预测的结果是类别。</p><p>&#x2F; 分類法:離散確率変数をモデル化または予測する教師あり学習アルゴリズムです。 簡単に言えば、予測される結果はカテゴリです。</p><p>常用算法：<br>Logistic 回归（正则化）、分类树（集成方法）、深度学习、支持向量机（SVM）、朴素贝叶斯等等。</p><p>&#x2F; 一般的なアルゴリズム:<br>ロジスティック回帰(正則化)、分類木(アンサンブル法)、深層学習、サポートベクターマシン(SVM)、ナイーブベイズなど。</p><p>聚类是一种无监督学习，所以就不介绍了。</p><p>&#x2F; クラスタリングは教師なし学習の一形態であるため、だから私はそれを紹介しません。</p><h4 id="机器学习具体流程-機械学習の具体的なプロセス"><a href="#机器学习具体流程-機械学習の具体的なプロセス" class="headerlink" title="机器学习具体流程 &#x2F; 機械学習の具体的なプロセス"></a>机器学习具体流程 &#x2F; 機械学習の具体的なプロセス</h4><p>机器学习首要的是数据，一般我们会把数据分为三个部分：训练集、验证集以及测试集。其中训练集占比最多大概在60%-80%，而验证集和测试集一般占比都在10%-20%。</p><p>&#x2F; 機械学習は何よりもまずデータであり、一般的にデータはトレーニングセット、検証セット、テストセットの3つの部分に分けられます。 その中で、トレーニングセットは最大で約60%〜80%を占め、検証セットとテストセットは通常10%〜20%を占めます。</p><p>作用如图所示 &#x2F; 効果を図に示します：<br><img src="/2023/09/13/2023-09-13%E5%91%A8%E6%8A%A5/01.png"></p><p>分好数据以后，我们可以根据需求选择合适的模型进行训练，例如我想让机器分出猫狗，那么就可以选择Logistic回归方法来解决。训练好以后的模型利用测试集对自身进行评估并且不断调整超参数，直至选出在测试集上效果最好的模型，然后利用验证集进行评估模型最终的学习效果。</p><p>&#x2F;データを分割した後、必要に応じてトレーニングに適したモデルを選択できます, たとえば、猫と犬を分離するためにマシンを使用する場合, ロジスティック回帰を選択して解決できます. トレーニング後、モデルは自己評価のためにテスト セットを使用し、テスト セットで最もパフォーマンスの高いモデルが選択されるまでハイパーパラメーターを継続的に調整し、検証セットを使用してモデルの最終的な学習効果を評価します。</p><p>如图所示 &#x2F; 効果を図に示します：<br><img src="/2023/09/13/2023-09-13%E5%91%A8%E6%8A%A5/02.png"></p><h4 id="如何建模？-モデル化するには"><a href="#如何建模？-モデル化するには" class="headerlink" title="如何建模？ &#x2F; モデル化するには?"></a>如何建模？ &#x2F; モデル化するには?</h4><p>训练模型表示通过有标签样本来学习（确定）所有权重和偏差的理想值。在监督式学习中，机器学习算法通过以下方式构建模型：检查多个样本并尝试找出可最大限度地减少损失的模型；这一过程称为经验风险最小化。</p><p>&#x2F; トレーニング済みモデルは、ラベル付きサンプルを持つことにより、すべての重みとバイアスを学習 (決定) するための理想的な値を表します。 教師あり学習では、機械学習アルゴリズムは、複数のサンプルを調べ、損失を最小限に抑えるモデルを見つけようとすることによってモデルを構築します。 このプロセスは、経験的リスク最小化と呼ばれます。</p><h4 id="如何评估模型好坏？-モデルの品質を評価する方法は"><a href="#如何评估模型好坏？-モデルの品質を評価する方法は" class="headerlink" title="如何评估模型好坏？ &#x2F; モデルの品質を評価する方法は?"></a>如何评估模型好坏？ &#x2F; モデルの品質を評価する方法は?</h4><p>为了评估模型拟合的好坏，通常用损失函数来度量拟合的程度。损失函数极小化，意味着拟合程度最好，对应的模型参数即为最优参数。</p><p>&#x2F; モデルがどの程度適合しているかを評価するために、通常、適合度は損失関数によって測定されます。 損失関数は最小化され、適合が最良であり、対応するモデルパラメータが最適なパラメータであることを意味します。</p><h5 id="损失函数（loss-function）-損失関数（loss-function）"><a href="#损失函数（loss-function）-損失関数（loss-function）" class="headerlink" title="损失函数（loss function） &#x2F; 損失関数（loss function）"></a>损失函数（loss function） &#x2F; 損失関数（loss function）</h5><p>损失函数就是用来度量模型的预测值f(x)与真实值Y的差异程度的运算函数。</p><p>&#x2F; 損失関数は、モデルの予測値f(x)と真の値Yとの差の度合いを測定する演算関数です。</p><h5 id="过拟合（Over-fitting）-オーバーフィッティング（Over-fitting）"><a href="#过拟合（Over-fitting）-オーバーフィッティング（Over-fitting）" class="headerlink" title="过拟合（Over fitting）&#x2F; オーバーフィッティング（Over fitting）"></a>过拟合（Over fitting）&#x2F; オーバーフィッティング（Over fitting）</h5><p>有时损失函数很小但最终的训练效果却并不好，因为模型太复杂，它过度学习历史数据，因此学习到的无关特征太多，这种情况称为过拟合。</p><p>&#x2F; 損失関数は小さいが、最終的なトレーニング効果は良くない、モデルが複雑すぎるため、履歴データを過剰に学習し、無関係な特徴を学習しすぎてオーバーフィットと呼ばれることがあります。</p><p>如图所示 &#x2F; 効果を図に示します：<br><img src="/2023/09/13/2023-09-13%E5%91%A8%E6%8A%A5/03.png"></p><blockquote><p>图源吴恩达机器学习 &#x2F; 出典:Andrew Ng 機械学習</p></blockquote><h5 id="正则化（Regularization）-本格化（Regularization）"><a href="#正则化（Regularization）-本格化（Regularization）" class="headerlink" title="正则化（Regularization） &#x2F; 本格化（Regularization）"></a>正则化（Regularization） &#x2F; 本格化（Regularization）</h5><p>为了防止机器学习中发生过拟合，需要在损失函数中加入正则项，这种情况称之为正则化。它对系数进行惩罚，通过向模型添加额外参数来防止模型过度拟合，这有助于提高模型的可靠性、速度和准确性。</p><p>&#x2F; 機械学習におけるオーバーフィッティングを防ぐためには、正則化と呼ばれる状況である損失関数に正則項を追加する必要があります。 係数にペナルティを課し、モデルにパラメーターを追加することでモデルのオーバーフィットを防ぎ、モデルの信頼性、速度、精度の向上に役立ちます。</p><p>关于机器学习的基础理论部分就到此为止啦，之后会慢慢更具体的算法内容。</p><p>&#x2F; これで機械学習に関する基本的な理論的部分は終わり、その後、より具体的なアルゴリズムの内容が徐々に続きます。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本周将学习基础的机器学习。&lt;/p&gt;
&lt;p&gt;&amp;#x2F; 今週は機械学習の基本を学びます。&lt;/p&gt;
&lt;h2 id=&quot;首先是机器学习-1つ目は機械学習です&quot;&gt;&lt;a href=&quot;#首先是机器学习-1つ目は機械学習です&quot; class=&quot;headerlink&quot; title=&quot;首先是机</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2023.09.05周报 / 週報</title>
    <link href="http://likeyukiyuki.github.io/2023/09/05/2023-09-05%E5%91%A8%E6%8A%A5/"/>
    <id>http://likeyukiyuki.github.io/2023/09/05/2023-09-05%E5%91%A8%E6%8A%A5/</id>
    <published>2023-09-04T19:18:57.000Z</published>
    <updated>2023-09-13T13:06:59.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于图片不能显示的问题：已解决-画像が表示されない問題：解決済み"><a href="#关于图片不能显示的问题：已解决-画像が表示されない問題：解決済み" class="headerlink" title="关于图片不能显示的问题：已解决 &#x2F; 画像が表示されない問題：解決済み"></a>关于图片不能显示的问题：已解决 &#x2F; 画像が表示されない問題：解決済み</h2><p>之前尝试安装hexo-render-marked插件时正好遇上“package.json文件内没有md文件转html渲染器”的问题，于是耽搁了下来。当解决完上述问题时，再去安装插件就顺利很多了。<br>&#x2F; hexo-render-markedプラグインをインストールしようとしたところ、”package.jsonファイル内にmdファイルをhtmlに変換するレンダラーがない”という問題が発生しました、だから遅れが出た。上記の問題が解決されると、プラグインをインストールするのがとてもスムーズになった。<br>首先是键入命令:<br>&#x2F; 最初のステップは、コマンドを入力すること:</p><p><code>npm install hexo-renderer-marked --save</code></p><p>安装成功后，在_config.yml中修改配置：<br>&#x2F; インストールに成功したら、_config.ymlの設定を変更する：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true //在创建一个新文章时自动创建同名文件夹，用于放图片  /   新しい投稿が作成されると自動的に同じ名前のフォルダが作成され、画像用に使用できます。</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>然后在需要引用图片的博客内使用<code>![](图片路径)</code><br>&#x2F; 次に、画像を参照する必要があるブログ内で<code>![](图片路径)</code>を使用する<br>例如：我现在有一篇文章叫“番茄钟.md”，如图所示：<br>&#x2F; 例えば、写真のような “番茄钟.md “という記事がある：<br><img src="/2023/09/05/2023-09-05%E5%91%A8%E6%8A%A5/example_file.png"><br>我需要在这篇文章内引用一张图片，那我就把图片放同名文件夹“番茄钟”内,如图所示：<br>&#x2F; この記事では写真を引用する必要があるので、写真のように「番茄钟」という同名のフォルダに写真を入れておく：<br><img src="/2023/09/05/2023-09-05%E5%91%A8%E6%8A%A5/example_tomata.png"><br>接下来我只需要在“番茄钟.md”内写上相对路径即可，例如：<code>![](./番茄钟.md /zt.png)</code>,效果如图：<br>&#x2F; 次に「番茄钟.md」の内に相対パスを書くだけだ、例えば:<code>![](./番茄钟/zt.png)</code>、効果は写真の通り：<br><img src="/2023/09/05/2023-09-05%E5%91%A8%E6%8A%A5/example_use.png"><br>如果需要设置图片的尺寸可以使用标签：<code>&lt;img src=&quot;相对路径&quot; width=&quot;数值&quot; height=&quot;数值&quot;&gt;</code>。<br>&#x2F; 画像のサイズを設定する必要がある場合は、タグを使用することができます：<code>&lt;img src=&quot;相対パス&quot; width=&quot;数値&quot; height=&quot;数値&quot;&gt;</code>。<br>依旧用番茄钟举例子，如图所示：<br>&#x2F; まだトマトの時計を例にしている、下図に示すよう:<br><img src="/2023/09/05/2023-09-05%E5%91%A8%E6%8A%A5/example_size.png"><br>记得绝对路径一定要写对，当对放图片的文件夹重命名以后，一定要把路径内名字改成新的，不然点击文章以后，hexo网页会变成404。一开始我还很疑惑为什么主页运行正常但是一点击文章就404了呢，后来发现是因为把放图片的文件夹改名后忘记在md文件内改过来了。<br>&#x2F; 絶対パスを正しく書くことを忘れないでください、写真が保存されているフォルダの名前を変更した後、必ずパス名を新しいものに変更してください。そうしないと、記事をクリックした後、ヘキソのページが404エラーになる。最初は、ホームページは問題なく動いているのに、記事をクリックすると404になってしまうので不思議に思っていたのですが、写真を入れたフォルダの名前を変更し、mdファイルで変更するのを忘れていたのが原因だとわかりました。<br><img src="/2023/09/05/2023-09-05%E5%91%A8%E6%8A%A5/cause404.png"><br>关于图片的问题到此就完美解决啦~<br>&#x2F; 写真の問題はこれで完璧に解決した。</p><h2 id="有关Linux学习中遇到的问题-Linux学習についての質問"><a href="#有关Linux学习中遇到的问题-Linux学習についての質問" class="headerlink" title="有关Linux学习中遇到的问题 &#x2F; Linux学習についての質問"></a>有关Linux学习中遇到的问题 &#x2F; Linux学習についての質問</h2><p>目前仅仅进行了简单的命令行学习，有关复制文件的cp命令稍微有点困惑：需要获取的源文件是否需要指定路径呢。后来搞清楚了cp的命令格式<br>&#x2F; これまで簡単なコマンドライン学習しかしてこなかったが、ファイルをコピーするためのcpコマンドに少し戸惑っている：取得したいソースファイルへのパスを指定する必要がありますか？そして、cpコマンドの書式を理解した。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [源文件路径] [目标文件路径]</span><br></pre></td></tr></table></figure><p>例如我有一个文件&#x2F;home&#x2F;yuki&#x2F;file.txt，我想在&#x2F;home&#x2F;yuki&#x2F;copy目录下复制一个文件，则需要运行:<br>&#x2F; 例えば、&#x2F;home&#x2F;yuki&#x2F;file.txtというファイルがあり、そのコピーを&#x2F;home&#x2F;yuki&#x2F;copyディレクトリに作りたい、そして、次のように実行する：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /home/yuki/file.txt /home/yuki/copy/file.txt</span><br></pre></td></tr></table></figure><p>示例用的都是绝对路径，当然也可换成相对路径。<br>&#x2F; 例では絶対パスを使用しているが、もちろん相対パスに置き換えることもできる。</p><h2 id="一些学习Linux的感悟-Linuxを学ぶためのいくつかの見識"><a href="#一些学习Linux的感悟-Linuxを学ぶためのいくつかの見識" class="headerlink" title="一些学习Linux的感悟 &#x2F; Linuxを学ぶためのいくつかの見識"></a>一些学习Linux的感悟 &#x2F; Linuxを学ぶためのいくつかの見識</h2><p>个人感受是Linux跟Windows最大的区别在于Linux基本上都是命令行，而Windows基本上都是可视化的工具，很早以前我刚刚学习编程连电脑都摸不清楚的时候对于命令行工具十分抗拒。一方面是完全不熟悉，甚至没有见过，于是对于陌生的东西自然而然感到恐惧。另外一方面是由于根本不理解命令行的意义，而且对于不能用肉眼看到变化的命令总是不相信的。<br>&#x2F; 私の個人的な感覚では、LinuxとWindowsの最大の違いは、Linuxが基本的にコマンドラインであるのに対し、Windowsは基本的にビジュアルツールであることだ。昔、プログラミングを習いたての頃、コンピューターもろくに使えなかった私は、コマンドラインツールにとても抵抗があった。一方では、まったく馴染みがない、あるいは見たことがないために、馴染みのないものに対する自然な恐怖がある。一方では、コマンドラインの意味を全然理解しておらず、そして、肉眼で変化を見えないコマンドはいつも信じらない。</p><p>在随着编程学习的不断深入，使用命令行工具也成了不可或缺的事情，由于之前在Windows中使用powershell也稍微有些经验后，再去接触Linux觉得对计算机操作系统的理解更深刻了。<br>&#x2F; プログラミング学習の深化に伴い、コマンドラインツールの使用は不可欠なものとなっているため、Windowsでもpowershellの使用前に若干の経験がある、その後、Linuxは、コンピュータのオペレーティングシステムのより深遠な理解を感じに触れに行く。</p><p>让我觉得比较有意思的指令是管道”|”和输出重定向”&gt;”,以前我从不知道在终端输入一个命令之后之后发生了什么事，系统又是做了什么从把我们想要的结果呈现在终端的。当我了解到管道”|”以后，我才知道一个程序的输出流可以接在另外一个程序的输入流上，所以可以同时组合不同的命令。了解”&gt;”后知道，我们可以重定向输出到某个文件（一般默认是输出到终端）。<br>&#x2F; 私が面白いと思ったコマンドは、パイプ「｜」と出力リダイレクト「&gt;」で、ターミナルにコマンドを入力した後に何が起こるのか、そしてターミナルに望む結果を得るためにシステムが何をするのか、私は知らなかった。 パイプ「｜」について学んだとき、あるプログラムの出力ストリームを別のプログラムの入力ストリームに接続することで、異なるコマンドを同時に組み合わせることができることを知った。 について学んだとき、出力をファイルにリダイレクトできることを学んだ（通常、デフォルトの出力はターミナルにある）。</p><p>例如我想创建一个文件并且把当前目录下所有的目录和文件名放入该文件，如果用图形界面操作就有点麻烦了，对我来说需要创建文件然后一个个复制粘贴进去，但是使用Linux只需要一个命令：<br>&#x2F; 例えば、あるファイルを作成し、そのファイルにカレント・ディレクトリー内のすべてのディレクトリーとファイル名を入れたい場合、グラフィカルインターフェイスでそれを行うのは少々面倒で、私はファイルを作成し、一つ一つコピー＆ペーストする必要があるが、Linuxでは一つのコマンドで済む：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &gt; file</span><br></pre></td></tr></table></figure><p>如果我想查找字符串 “world”，并只打印匹配的行数：<br>\ 文字列 “world “を検索し、一致する行だけを表示したい場合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world&quot; | grep -c world</span><br></pre></td></tr></table></figure><p>最后一个觉得比较有意思的东西是vim，简单来说相当于Windows内的记事本，但是远比记事本方便快捷的的多。<br>\ 最後に私が面白いと思ったのはvimで、これは単にWindowsのメモ帳に相当するものだが、はるかに便利で速い。</p><p>我可以直接使用<code>vim file</code> 打开或者创建一个文件，也就是file存在则vim会为我打开它，要是不存在则会为我创建它。<br>\ <code>vim file</code>でファイルを直接開いたり作成したりする、つまり、ファイルが存在すればvimがそれを開いてくれるし、存在しなければファイルを作成してくれる。</p><p>vim打开文件后是命令行模式，在该模式下只能使用命令例如d删除光标所在的行，点击i进入输入模式，可以随意的输入内容。最后输入：进入末行模式中，输入wq可以保存并推出。<br>\ ファイルを開いた後のvimはコマンドラインモードで、このモードでは、カーソルがある行を削除するには、dなどのコマンドを使用することができ、入力モードに入るには、iをクリックして、自由に内容を入力することができます。 最後の入力：最後の行モードに入り、保存して起動するためにwqを入力します。</p><p>关于各个模式切换：默认就是命令行模式，按i、a或o进入编辑模式，再按ESC返回到命令行模式。在命令行模式输入冒号切换到末行模式，再按ESC又返回到命令行模式。编辑模式和末行模式之间不能直接切换，只能通过命令行模式切换。<br>\ 各モードの切り替えについて：デフォルトはコマンドラインモードで、i、a、または o を押して編集モードに入り、ESC を押してコマンドラインモードに戻ります。 コマンドラインモードでは、コロンを入力するとラストラインモードに切り替わり、ESCを押すとコマンドラインモードに戻ります。 編集モードと最終行モードを直接切り替えることはできません。</p><p>vim还有其他各种各样有用的功能，它可以将一个或多个命令写入文件，那只要运行该文件就可以得到一个高效的脚本了。不过具体的我还需要再慢慢探究，目前了解的信息大多是基于理论，后面会尽量通过实操提高理解的。<br>\ vimには他にもいろいろと便利な機能があって、1つ以上のコマンドをファイルに書き込んで、そのファイルを実行するだけで効率的なスクリプトを作ることができる。 でも、具体的なことはもっとゆっくり探っていく必要がある。今のところ知っている情報のほとんどは理論に基づいたもので、後で実際に手を動かして理解を深めていこうと思う。</p><p>这次的周报就到此为止啦。<br>\ 今回の週報は以上である。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于图片不能显示的问题：已解决-画像が表示されない問題：解決済み&quot;&gt;&lt;a href=&quot;#关于图片不能显示的问题：已解决-画像が表示されない問題：解決済み&quot; class=&quot;headerlink&quot; title=&quot;关于图片不能显示的问题：已解决 &amp;#x2F; 画像が表示</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用vue+python制作简易番茄钟/vue+pythonでシンプルなトマトクロックを作る</title>
    <link href="http://likeyukiyuki.github.io/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/"/>
    <id>http://likeyukiyuki.github.io/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/</id>
    <published>2023-09-04T19:11:51.065Z</published>
    <updated>2023-09-13T14:33:48.231Z</updated>
    
    <content type="html"><![CDATA[<h5 id="日期-デート-2023-09-01-02-51-26"><a href="#日期-デート-2023-09-01-02-51-26" class="headerlink" title="日期&#x2F;デート: 2023-09-01 02:51:26"></a>日期&#x2F;デート: 2023-09-01 02:51:26</h5><h3 id="网页整体如下-ページ全体は以下の通り："><a href="#网页整体如下-ページ全体は以下の通り：" class="headerlink" title="网页整体如下&#x2F;ページ全体は以下の通り："></a>网页整体如下&#x2F;ページ全体は以下の通り：</h3><p><img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/zt.png"></p><h4 id="前端vue所实现的功能-フロントエンドのvueが実装する機能："><a href="#前端vue所实现的功能-フロントエンドのvueが実装する機能：" class="headerlink" title="前端vue所实现的功能&#x2F;フロントエンドのvueが実装する機能："></a>前端vue所实现的功能&#x2F;フロントエンドのvueが実装する機能：</h4><h4 id="1-实现计时器功能，即一轮30分钟的倒计时，前25分钟工作，后五分钟休息。-タイマー機能を導入する。つまり、30分のカウントダウンを繰り返し、最初の25分は仕事、最後の5分は休憩とする。"><a href="#1-实现计时器功能，即一轮30分钟的倒计时，前25分钟工作，后五分钟休息。-タイマー機能を導入する。つまり、30分のカウントダウンを繰り返し、最初の25分は仕事、最後の5分は休憩とする。" class="headerlink" title="1.实现计时器功能，即一轮30分钟的倒计时，前25分钟工作，后五分钟休息。&#x2F;タイマー機能を導入する。つまり、30分のカウントダウンを繰り返し、最初の25分は仕事、最後の5分は休憩とする。"></a>1.实现计时器功能，即一轮30分钟的倒计时，前25分钟工作，后五分钟休息。&#x2F;タイマー機能を導入する。つまり、30分のカウントダウンを繰り返し、最初の25分は仕事、最後の5分は休憩とする。</h4><blockquote><p>参考代码如下（写在script标签内的哦）&#x2F;参照コードは以下の通りである（scriptタグ内に記述）：</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一些需要用到的变量/使用する変数を定義する</span></span><br><span class="line"><span class="keyword">const</span> seconds = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> minutes = <span class="title function_">ref</span>(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">ref</span>(<span class="title class_">State</span>.<span class="property">Init</span>);</span><br><span class="line"><span class="keyword">const</span> is_pause = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="attr">timer</span>: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> msg=<span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义三种不同的状态/3つの異なる状態を定義する</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  <span class="title class_">Init</span>, <span class="comment">// 初始/初期</span></span><br><span class="line">  <span class="title class_">Working</span>, <span class="comment">// 工作/仕事</span></span><br><span class="line">  <span class="title class_">Resting</span> <span class="comment">// 休息/休み</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关于工作状态的设置/仕事の状況の設定について</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">message</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">value</span> === <span class="title class_">State</span>.<span class="property">Init</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;还未启动&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.<span class="property">value</span> === <span class="title class_">State</span>.<span class="property">Working</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;工作&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.<span class="property">value</span> === <span class="title class_">State</span>.<span class="property">Resting</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;休息&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据当前时间数值返回不同状态/現在の時間値に基づいて異なる状態を返す</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clock</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (minutes.<span class="property">value</span> &gt; <span class="number">5</span> &amp;&amp; minutes.<span class="property">value</span> &lt; <span class="number">30</span>) &#123;</span><br><span class="line">    state.<span class="property">value</span> = <span class="title class_">State</span>.<span class="property">Working</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    state.<span class="property">value</span> = <span class="title class_">State</span>.<span class="property">Resting</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="预期实现效果如下图所示"><a href="#预期实现效果如下图所示" class="headerlink" title="预期实现效果如下图所示"></a>预期实现效果如下图所示</h6><p><img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/clock——init.png" width="250" height="300"><img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/clock——working.png" width="250" height="300"><br><img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/clock——resting.png" width="250" height="300"><img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/worked.png" width="250" height="300"></p><blockquote><p>这里设定了一个计时器，timefn()函数控制了计时的开始，pauseFn()函数控制了计时的结束&#x2F;ここではタイマーが設定され、timefn()関数がタイマーの開始を制御し、pauseFn()関数がタイマーの終了を制御する。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  is_pause.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  timer = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">clock</span>()</span><br><span class="line">    <span class="keyword">if</span> (minutes.<span class="property">value</span> &lt;= <span class="number">0</span> &amp;&amp; seconds.<span class="property">value</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span> = <span class="title class_">State</span>.<span class="property">Init</span>;<span class="comment">//设置初始状态/初期状態の設定</span></span><br><span class="line">      count=<span class="number">1</span>;<span class="comment">//后期用的计算轮数的变量，可以先忽略/回数を計算するために後で使用する変数は、今は無視してもよい。</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">      <span class="title function_">pauseFn</span>();</span><br><span class="line">      <span class="title function_">vue_count</span>();<span class="comment">//向后端传轮数的函数，可以先忽略/バックエンドに回数を渡す関数は、今のところ無視できる</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (seconds.<span class="property">value</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        seconds.<span class="property">value</span> = <span class="number">60</span>;</span><br><span class="line">        minutes.<span class="property">value</span>--;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        seconds.<span class="property">value</span>--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//暂停倒计时/カウントダウンを停止する</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pauseFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  is_pause.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>如果想要网页上提醒用户现在的状态，使用computed是非常方便的选择，参考代码如下&#x2F;ウェブページの現在の状態をユーザーに知らせるには、computedを使うのが便利です：</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filled_minute = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">fill</span>(minutes));</span><br><span class="line"><span class="keyword">const</span> filled_second = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">fill</span>(seconds));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message_state = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">message</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fill</span>(<span class="params">in_num: Ref&lt;<span class="built_in">number</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (in_num.<span class="property">value</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> in_num.<span class="property">value</span>.<span class="title function_">toString</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span> + in_num.<span class="property">value</span>.<span class="title function_">toString</span>();<span class="comment">//当倒计时到个位数时自动补零/カウントダウンが一桁になると、自動的にゼロを補充</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unction <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (minutes.<span class="property">value</span> &lt;= <span class="number">0</span> &amp;&amp; seconds.<span class="property">value</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    minutes.<span class="property">value</span> = <span class="number">30</span>;<span class="comment">//当倒计时结束重新启动时把时间补回30分钟/カウントダウンが終わって再開すると、時間は30分に戻される</span></span><br><span class="line">    seconds.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="title function_">timeFn</span>();</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">timeFn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>绑定到网页上的按钮（template标签内）&#x2F;ウェブページのボタンへのバインド（テンプレートタグ内）：</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px; height: 100px;clear: both;text-align: center;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20%;margin-left: 65px;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;click&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20%;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;pauseFn&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">el-footer</span>&gt;</span>现在是&#123;&#123; message_state &#125;&#125;时间哦~<span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>接下来是一些附加的功能，主要是注册登录和获取排行榜信息。预期实现效果如下图&#x2F;次に、いくつかの追加機能、主に登録とログイン、そしてランキング情報の取得です。 予想される実装を以下に示します。<br>使用没有注册过的账号登录，页面提示账号不存在以后进行注册&#x2F;登録されていないアカウントでログインすると、アカウントは存在しませんと表示され、登録するよう促される。</p></blockquote><p><img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/null.png"></p><p>注册成功以后登录&#x2F;登録が完了したらログインする：<br><img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/login.png"><br>当密码错误时进行提示&#x2F;パスワードが間違っている場合の警告：<img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/login_fail.png"></p><h4 id="注册登录的参考代码如下-登録およびログインのための参照コードは以下の通りです"><a href="#注册登录的参考代码如下-登録およびログインのための参照コードは以下の通りです" class="headerlink" title="注册登录的参考代码如下&#x2F;登録およびログインのための参照コードは以下の通りです:"></a>注册登录的参考代码如下&#x2F;登録およびログインのための参照コードは以下の通りです:</h4><p>vue（script标签中）内代码&#x2F;vue内のコード（scriptタグ内）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义请求成功后返回的string变量、リクエストが成功した場合に返される文字列変数を定義する</span></span><br><span class="line"><span class="keyword">const</span> aa = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册/ログイン</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">register</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8888/register&quot;</span>, <span class="comment">//使用axios向后端发送请求/axiosを使ったバックエンドへのリクエスト送信</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">user_id</span>: user.<span class="property">value</span>,</span><br><span class="line">    <span class="attr">password</span>: password.<span class="property">value</span>,<span class="comment">//发送了账号密码/アカウントのパスワードを送信</span></span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">status</span> == <span class="number">200</span>) &#123; <span class="comment">// 如果成功执行/正常に実行された場合</span></span><br><span class="line">    aa.<span class="property">value</span> = res.<span class="property">data</span><span class="comment">//返回值是一个字符串“注册成功”/戻り値は文字列 &quot;Registration Successful &quot;である。</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//登录/ログインする</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8888/login&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">user_id</span>: user.<span class="property">value</span>,</span><br><span class="line">    <span class="attr">password</span>: password.<span class="property">value</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">status</span> == <span class="number">200</span>) &#123; <span class="comment">// 如果成功执行/正常に実行された場合</span></span><br><span class="line">    aa.<span class="property">value</span> = res.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">vue_top</span>();<span class="comment">//后期获取排行榜使用的函数，可以先忽略/後の段階でランキングボードを取得するために使用される関数は、今のところ無視することができる。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vue（template标签中）内&#x2F;vue（テンプレート・タグ内）:</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;widows: 80px;height: 80px;clear: both;&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;user&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请在此输入账号/用户名&quot;</span> /&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请在此输入密码哦&quot;</span> <span class="attr">show-password</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20%;margin-left: 65px;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20%;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-text</span> <span class="attr">class</span>=<span class="string">&quot;mx-1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>&#123;&#123; aa &#125;&#125;<span class="tag">&lt;/<span class="name">el-text</span>&gt;</span></span></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="后端python出场啦-バックエンドのpythonが出た"><a href="#后端python出场啦-バックエンドのpythonが出た" class="headerlink" title="后端python出场啦&#x2F;バックエンドのpythonが出た"></a>后端python出场啦&#x2F;バックエンドのpythonが出た</h4><blockquote><p>后端python中参考代码&#x2F;バックエンドの python の参照コード：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3 <span class="comment">#数据库用的sqlite3哦，记得自己在命令行里创建数据库/データベースはsqlite3です、コマンドラインでデータベースを作成することを忘れないでください。</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware <span class="comment"># 用来支持跨域/クロスドメインのサポートに使用される</span></span><br><span class="line"><span class="keyword">import</span> uvicorn <span class="comment"># 相当于服务器的启动器/サーバー起動装置に相当</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel <span class="comment"># 用来定义POST请求接受的类型/受け入れられるPOSTリクエストのタイプを定義するために使用される。</span></span><br><span class="line"></span><br><span class="line">app = FastAPI() <span class="comment"># 定义后端服务器/バックエンドサーバーの定義</span></span><br><span class="line"><span class="comment"># 搜索关键词“跨域”，因为前端和后端不在同一个端口，所以为了安全，默认禁止互相访问，为了互相访问，我们需要跨域/クロス・ドメイン」というキーワードで検索すると、フロント・エンドとバック・エンドは同じポートに存在しないため、安全のためにデフォルトでは相互アクセスが禁止されており、相互アクセスするためにはクロス・ドメインする必要がある！</span></span><br><span class="line"><span class="comment"># 参考 https://blog.csdn.net/moshowgame/article/details/107285660</span></span><br><span class="line">app.add_middleware(</span><br><span class="line">CORSMiddleware,</span><br><span class="line"><span class="comment"># 允许跨域的源列表，例如 [&quot;http://www.example.org&quot;] 等等，[&quot;*&quot;] 表示允许任何源 / 許可されたクロスドメイン・ソースのリスト。例えば[&quot;http://www.example.org&quot;]など。[&quot;*&quot;]はどのソースでも許可されることを意味する。</span></span><br><span class="line">allow_origins=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line"><span class="comment"># 跨域请求是否支持 cookie，默认是 False，如果为 True，allow_origins 必须为具体的源，不可以是 [&quot;*&quot;] / クロスドメインリクエストがクッキーをサポートするかどうか。デフォルトは False。True の場合、allow_origins は [&quot;*&quot;] ではなく、ソースを指定しなければなりません。</span></span><br><span class="line">allow_credentials=<span class="literal">False</span>,</span><br><span class="line"><span class="comment"># 允许跨域请求的 HTTP 方法列表，默认是 [&quot;GET&quot;] / クロスドメインリクエストを許可するHTTPメソッドのリスト、デフォルトは[&quot;GET&quot;]。</span></span><br><span class="line">allow_methods=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line"><span class="comment"># 允许跨域请求的 HTTP 请求头列表，默认是 []，可以使用 [&quot;*&quot;] 表示允许所有的请求头 / クロスドメインリクエストで許可されるHTTPリクエストヘッダのリスト、デフォルトは[]、[&quot;*&quot;]を使用するとすべてのリクエストヘッダが許可されることを示す。</span></span><br><span class="line">allow_headers=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line"><span class="comment"># 可以被浏览器访问的响应头, 默认是 []，一般很少指定 / ブラウザがアクセスできるレスポンスヘッダ。デフォルトは[]で、指定されることはほとんどない。</span></span><br><span class="line"><span class="comment"># expose_headers=[&quot;*&quot;]</span></span><br><span class="line"><span class="comment"># 设定浏览器缓存 CORS 响应的最长时间，单位是秒。默认为 600，一般也很少指定 /ブラウザがCORS応答をキャッシュする最大時間を秒単位で設定する。 デフォルトは600で、指定されることはほとんどない。</span></span><br><span class="line"><span class="comment"># max_age=1000</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">#注释源自世界上最好的看我写不出来代码给我写了一份demo的好朋友，我自己写的注释离奇消失，直接把demo里的拿来用啦 /注釈はコードを書けなかった私にデモを書いてくれた世界最高の友人から,自分のコメントが妙に消えてしまったので、デモにあるものだけを使った。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义接收的对象 /受信オブジェクトの定義</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterInfo</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    user_id: <span class="built_in">str</span></span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/register&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">info: RegisterInfo</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;/register: User(id:<span class="subst">&#123;info.user_id&#125;</span>) registered.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接数据库 /データベースへの接続</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功连接数据库&quot;</span>)</span><br><span class="line">    <span class="comment"># 向表中添加账号密码 /テーブルへのアカウント・パスワードの追加</span></span><br><span class="line"></span><br><span class="line">    x: <span class="built_in">tuple</span>[<span class="built_in">int</span>] = c.execute(</span><br><span class="line">        <span class="string">&quot;select count(*) from user where id=?&quot;</span>, (info.user_id,)).fetchone()</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="comment"># 注册 /ログイン</span></span><br><span class="line">    n = x[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已有账号&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;已有账号，请登录哦&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c.execute(<span class="string">&quot;INSERT INTO USER (id, password,count) VALUES (?, ?,0)&quot;</span>,</span><br><span class="line">                  (info.user_id, info.password))</span><br><span class="line">        conn.commit()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数据插入成功&quot;</span>)</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;注册成功~&quot;</span></span><br><span class="line"><span class="comment"># 登录 / ログインする</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">info: RegisterInfo</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;/login: User(id:<span class="subst">&#123;info.user_id&#125;</span>) registered.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接数据库 /データベースへの接続</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功连接数据库&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证账号是否存在 /アカウントが存在することを確認する</span></span><br><span class="line">    uid: <span class="built_in">tuple</span>[<span class="built_in">int</span>] = c.execute(</span><br><span class="line">        <span class="string">&quot;select count(*) from user where id=?&quot;</span>, (info.user_id,)).fetchone()</span><br><span class="line">    ps = c.execute(<span class="string">&quot;select count(*) from user where password=?&quot;</span>,</span><br><span class="line">                   (info.password,)).fetchone()</span><br><span class="line">    cuid = uid[<span class="number">0</span>]</span><br><span class="line">    cps = ps[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> cuid &gt; <span class="number">0</span> <span class="keyword">and</span> cps &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cuid &gt; <span class="number">0</span> <span class="keyword">and</span> cps == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cw&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cuid == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bcz&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;账号不存在&quot;</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行fastapi程序，定式（记得放底部哦） /fastapiプログラムを実行し、数式を設定する（一番下に設定するのを忘れないように）。</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  uvicorn.run(app=<span class="string">&quot;main:app&quot;</span>, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8888</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="最后是排行榜功能，可以往前翻看计时器中的代码，轮数已经定义，所以接下来显示的参考代码需要结合计时器内代码一起使用哦"><a href="#最后是排行榜功能，可以往前翻看计时器中的代码，轮数已经定义，所以接下来显示的参考代码需要结合计时器内代码一起使用哦" class="headerlink" title="最后是排行榜功能，可以往前翻看计时器中的代码，轮数已经定义，所以接下来显示的参考代码需要结合计时器内代码一起使用哦~"></a>最后是排行榜功能，可以往前翻看计时器中的代码，轮数已经定义，所以接下来显示的参考代码需要结合计时器内代码一起使用哦~</h4><p><img src="/2023/09/05/%E7%95%AA%E8%8C%84%E9%92%9F/top.png"></p><blockquote><p>vue中（script）代码：</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向后端传递番茄钟轮数 /トマトクロックの回数をバックエンドに渡す</span></span><br><span class="line"> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">vue_count</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> res =<span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:8888/count&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">user_id</span>: user.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">password</span>: password.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">count</span>: count</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">status</span> == <span class="number">200</span>) &#123; <span class="comment">// 如果成功执行 /正常に実行された場合</span></span><br><span class="line">        msg.<span class="property">value</span> = res.<span class="property">data</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//获取排行榜内容 /ランキング・コンテンツを得る</span></span><br><span class="line"><span class="keyword">const</span> tableData=<span class="title function_">ref</span>([])</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">vue_top</span>(<span class="params"></span>)<span class="comment">//被放入登录函数内，在登录的同时拉取到排行榜 /ログイン関数に入れられ、ログインするとすぐにランキング・コンテンツをを得る</span></span><br><span class="line"> &#123;</span><br><span class="line">      <span class="keyword">let</span> res=<span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8888/top&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">status</span>==<span class="number">200</span>)&#123;</span><br><span class="line">        tableData.<span class="property">value</span>=res.<span class="property">data</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vue中（template）代码：</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;color: lightpink; font-size: 30px; height: 800px; width: 200px;&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span>排行榜内容<span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;id&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;count&quot;</span> <span class="attr">label</span>=<span class="string">&quot;count&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>python内代码</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加轮数 /ラウンドを追加</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/count&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">info: countInfo</span>):</span><br><span class="line">    <span class="comment"># print(f&quot;/count: User(id:&#123;info.user_id&#125;) registered.&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接数据库 /データベースへの接続</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功连接数据库&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sql</span></span><br><span class="line">    n = c.execute(<span class="string">&quot;select count from user where id=?&quot;</span>,(info.user_id,)).fetchone()</span><br><span class="line">    n_count=n[<span class="number">0</span>]</span><br><span class="line">    c.execute(<span class="string">&quot;update user set count=?+? where id=?&quot;</span>, ( info.count,n_count,info.user_id))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功添加轮数&quot;</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;成功完成一次~&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取排行榜内容 /ランキング・コンテンツを得る</span></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/top&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">top</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;/top:接收到信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 连接数据库 /データベースへの接続</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功连接数据库&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#按照count降序查询用户名和count /countの降順で、ユーザー名とcountのクエリーを実行する</span></span><br><span class="line">    tabledata=[]</span><br><span class="line">    </span><br><span class="line">    top_list= c.execute(<span class="string">&quot;select id,count from user order by count desc&quot;</span>).fetchall()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> top_list:</span><br><span class="line">        data_item=&#123;&#125;</span><br><span class="line">        data_item[<span class="string">&quot;id&quot;</span>]=data[<span class="number">0</span>]</span><br><span class="line">        data_item[<span class="string">&quot;count&quot;</span>]=data[<span class="number">1</span>]</span><br><span class="line">        tabledata.append(data_item)</span><br><span class="line">    <span class="built_in">print</span>(tabledata)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功获取排行榜&quot;</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> tabledata</span><br></pre></td></tr></table></figure><blockquote><p>以上就是全部内容啦，感谢观看~&#x2F;以上です。ご視聴ありがとうございました！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;日期-デート-2023-09-01-02-51-26&quot;&gt;&lt;a href=&quot;#日期-デート-2023-09-01-02-51-26&quot; class=&quot;headerlink&quot; title=&quot;日期&amp;#x2F;デート: 2023-09-01 02:51:26&quot;&gt;&lt;/a&gt;日期</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>周报-2023.09.04</title>
    <link href="http://likeyukiyuki.github.io/2023/09/04/2023-09-04%E5%91%A8%E6%8A%A5/"/>
    <id>http://likeyukiyuki.github.io/2023/09/04/2023-09-04%E5%91%A8%E6%8A%A5/</id>
    <published>2023-09-04T12:52:09.000Z</published>
    <updated>2023-09-04T16:41:19.926Z</updated>
    
    <content type="html"><![CDATA[<p>这份周报记录的是上周的工作内容，由于一些原因今天才写成。</p><h1 id="上周的主要工作内容是"><a href="#上周的主要工作内容是" class="headerlink" title="上周的主要工作内容是"></a>上周的主要工作内容是</h1><ol><li>将番茄钟彻底完工收尾</li><li>搭建了个人博客</li><li>将番茄钟的相关内容写成文档上传到博客上</li></ol><h2 id="番茄钟收尾中遇到的问题"><a href="#番茄钟收尾中遇到的问题" class="headerlink" title="番茄钟收尾中遇到的问题"></a>番茄钟收尾中遇到的问题</h2><h4 id="调试方面"><a href="#调试方面" class="headerlink" title="调试方面"></a>调试方面</h4><p>在之前编写的过程中都没有进行过断点调试，后来尝试在后端进行断点调试的时候遇到了一些问题。<br>首先是在vscode中断点调试也是在需要进行断点的代码行旁进行断点添加，然后在运行调试即可。<br>而我始终开始运行调试后始终没有响应，后来发现是因为一开始已经启动了后端，而进行调试的时候又启动了一次后端，等于在调试时有两个后端，因此前端发送的请求并没有被当前调试的后端接受到，所以就一直没有反应。<br>其次是在调试后端时如果需要触发断点需要前端发送的请求，所以在前端也必须进行相应的操作对后端发送请求才行。</p><h4 id="代码部分-增加轮数"><a href="#代码部分-增加轮数" class="headerlink" title="代码部分-增加轮数"></a>代码部分-增加轮数</h4><p>一开始我的想法是定义一个变量count，当一轮计数结束时count++。但是一开始把它添加进了click函数（此函数由点击开始按钮触发）里。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (minutes.<span class="property">value</span> &lt;= <span class="number">0</span> &amp;&amp; seconds.<span class="property">value</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    minutes.<span class="property">value</span> = <span class="number">30</span>;</span><br><span class="line">    seconds.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="title function_">timeFn</span>();</span><br><span class="line">    <span class="comment">// msg.value=count.toString()</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">timeFn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>造成的结果是我无论运行了几轮，count始终等于1。后来经过朋友的提醒我才想到count这种计数的变量应该加入计时器timefn函数中，而不是需要点击才会触发的click函数里，由此解决了问题。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  is_pause.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  timer = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">clock</span>()</span><br><span class="line">    <span class="keyword">if</span> (minutes.<span class="property">value</span> &lt;= <span class="number">0</span> &amp;&amp; seconds.<span class="property">value</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span> = <span class="title class_">State</span>.<span class="property">Init</span>;</span><br><span class="line">      count=<span class="number">1</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">      <span class="title function_">pauseFn</span>();</span><br><span class="line">      <span class="title function_">vue_count</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (seconds.<span class="property">value</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        seconds.<span class="property">value</span> = <span class="number">60</span>;</span><br><span class="line">        minutes.<span class="property">value</span>--;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        seconds.<span class="property">value</span>--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>  番茄钟里的问题就到此为止啦。</p><h2 id="搭建个人博客时遇到的问题"><a href="#搭建个人博客时遇到的问题" class="headerlink" title="搭建个人博客时遇到的问题"></a>搭建个人博客时遇到的问题</h2><p>我采用的是hexo加git，一开始参照教程一路走下来挺顺畅的（其实也不是，但是主要问题都是由于没有认真看教程的锅，下次一定要认真看教程），但是当配置主题出现问题的时候想要利用git恢复版本却发现了问题。</p><h4 id="源代码并没有被git管理"><a href="#源代码并没有被git管理" class="headerlink" title="源代码并没有被git管理"></a>源代码并没有被git管理</h4><p>当我遇到问题想要恢复版本时发现，git管理的是hexo生成的网页文件，源代码并没有被git管理，而网页文件恰恰是依靠源代码进行生成的，于是我在尝试过多种方法解决无果之后重新搭建了一次，在搭建成功后立刻在git上创建分支将源代码提交到新分支进行管理。</p><h2 id="将写好的文档放入博客时遇到的问题"><a href="#将写好的文档放入博客时遇到的问题" class="headerlink" title="将写好的文档放入博客时遇到的问题"></a>将写好的文档放入博客时遇到的问题</h2><p>其实第一篇番茄钟放入博客时非常顺利，唯一的问题是图片不能正常显示。但是在后面我想使用插件让图片可以正常显示时发生了问题，下载完插件后进行本地运行，博客主页显示”cannot get&#x2F;“ 在网上查询解决方案后开始排查问题。</p><ol><li>source&#x2F;posts里没有放md文件<br>不成立，一开始就放入写了番茄钟的md文件了</li><li>public里的index.html文件为0kb<br>我去检查了public文件内的index.html文件，发现根本不存在。</li><li>public里没有index.html文件<br>看来就是这个原因了<br>然后这时朋友帮忙远程解决了问题，网页正常显示了。虽然图片的问题还没解决，但我想先暂时把周报写完再继续搞图片的问题，就在我生成新文章时，网页出现“cannot get&#x2F;”的事情又发生了。<br>最后弄了半天终于解决，以下是朋友帮忙解决后总结的思路：</li><li>我们只做了少量的修改却导致严重问题 -&gt; 问题出在git版本管理之外的文件</li><li>我们仔细检查了hexo的配置 -&gt; 不太可能是hexo配置或文件出错</li><li>public内任何html文件没有正确生成 -&gt; 可能是markdown转html的步骤出错<br>再进一步思考</li><li>1-&gt; git管理之外的文件，deploy、public这些是动态生成的，肯定不会是他们的问题，node_modules是根据package.json生成的，如果有问题，说明两个都有问题</li><li>2-&gt; 说明hexo确实没问题</li><li>3-&gt; 说明可能是md转html的渲染器问题<br>因此，可以得出结论，是之前自己操作时(或者hexo在默认情况下)，没有把必要的md转html渲染器放到 package.json 中，也就是 npm install 时没有加 –save参数，导致这个插件存在于 node_modules 文件夹内（因为我们最开始能运行），但是在进行了npm操作后，由于这个插件不在 package.json 中，被npm卸载了。</li><li>“npm install 名称”只是下载这个插件</li><li>“npm install –save 名称”是下载这个插件并且存入package.json</li><li>而”npm install”是把本地的 node_modules 按照 package.json 进行修改<br>因此，没有save的情况下下载后，再进行npm操作，就可能会把下载的插件卸载掉。在重新下载了必要插件，并且用save保存到了package.json中以后这个问题就圆满解决啦。</li></ol><h2 id="本周的计划"><a href="#本周的计划" class="headerlink" title="本周的计划"></a>本周的计划</h2><h4 id="1-学习Linux操作系统"><a href="#1-学习Linux操作系统" class="headerlink" title="1.学习Linux操作系统"></a>1.学习Linux操作系统</h4><p>初步了解并且学会使用相关命令。</p><h4 id="2-解决博客不显示图片的问题"><a href="#2-解决博客不显示图片的问题" class="headerlink" title="2.解决博客不显示图片的问题"></a>2.解决博客不显示图片的问题</h4><p>这个问题也算是存在许久了，本周一定要解决掉</p><hr><p>目前想法就这些了，希望这周的计划可以顺利进行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这份周报记录的是上周的工作内容，由于一些原因今天才写成。&lt;/p&gt;
&lt;h1 id=&quot;上周的主要工作内容是&quot;&gt;&lt;a href=&quot;#上周的主要工作内容是&quot; class=&quot;headerlink&quot; title=&quot;上周的主要工作内容是&quot;&gt;&lt;/a&gt;上周的主要工作内容是&lt;/h1&gt;&lt;ol&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
